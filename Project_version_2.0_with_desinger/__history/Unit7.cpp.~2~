//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit7.h"
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm7 *Form7;

int yo, num, yo_1, num_1;
String str, str_1;
//---------------------------------------------------------------------------
__fastcall TForm7::TForm7(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm7::DBGrid1CellClick(TColumn *Column)
{
	yo=ADOQueryGroupe->FieldByName("id")->AsInteger;
	str = DBGrid1->SelectedField->AsString;
	//ShowMessage(str);
	num=ADOQueryGroupe->RecNo;
	if(DBGrid1->DataSource && DBGrid1->DataSource->DataSet) yo = DBGrid1->DataSource->DataSet->FieldByName("id")->AsInteger;
	int selectedSpec = ADOQueryGroupe->FieldByName("spec")->AsInteger; // Замените на ваше имя поля "spec"
	int selectedCours = ADOQueryGroupe->FieldByName("cours")->AsInteger; // Замените на ваше имя поля "cours"

	// Строим SQL запрос для второго DBGrid на основе выбранных значений
	ADOQueryStudents->Close();
	ADOQueryStudents->SQL->Clear();
	ADOQueryStudents->SQL->Add("SELECT * FROM Students WHERE Speciality = :spec AND Cours = :cours");
	ADOQueryStudents->Parameters->ParamByName("spec")->Value = selectedSpec;
	ADOQueryStudents->Parameters->ParamByName("cours")->Value = selectedCours;
	ADOQueryStudents->Open(); // Выполняем запрос и обновляем второй DBGrid

int speciality_id = ADOQueryGroupe->FieldByName("spec")->AsInteger;

	// Создаем новый временный запрос для получения имени специальности
	TADOQuery *tempQuery = new TADOQuery(this);
	tempQuery->Connection = ADOQueryGroupe->Connection; // Подключаемся к той же базе данных

	// Формируем запрос для получения имени специальности
	tempQuery->SQL->Text = "SELECT name FROM Speciality WHERE id = :speciality_id";
	tempQuery->Parameters->ParamByName("speciality_id")->Value = speciality_id;

	tempQuery->Open();

	// Заполняем Edit1 именем специальности
	if (!tempQuery->IsEmpty())
	{
		Edit1->Text = tempQuery->FieldByName("name")->AsString;
	}

	// Заполняем Edit2 именем группы
	Edit2->Text = ADOQueryGroupe->FieldByName("name")->AsString;

	// Заполняем Edit3 курсом
	Edit3->Text = ADOQueryGroupe->FieldByName("cours")->AsString;

	// Закрываем и освобождаем временный запрос
	tempQuery->Close();
	delete tempQuery;

}
//---------------------------------------------------------------------------
void __fastcall TForm7::Button1Click(TObject *Sender)
{
 int specialityId;

// Найдите id специальности по имени
ADOQuerySpeciality->SQL->Text = "SELECT id FROM Speciality WHERE Name = :name";
ADOQuerySpeciality->Parameters->ParamByName("Name")->Value = Edit1->Text;
ADOQuerySpeciality->Open();

if (!ADOQuerySpeciality->IsEmpty()) {
	specialityId = ADOQuerySpeciality->FieldByName("id")->AsInteger;
	ADOQuerySpeciality->Close();
} else {
	ShowMessage("Специальность не найдена.");
	ADOQuerySpeciality->Close();
	return;
}

// Добавление новой записи в таблицу Groupe
ADOQueryGroupe->Append(); // Начинаем добавление новой записи
ADOQueryGroupe->FieldByName("spec")->AsInteger = specialityId; // Используем id специальности
ADOQueryGroupe->FieldByName("name")->AsString = Edit2->Text;
ADOQueryGroupe->FieldByName("cours")->AsString = Edit3->Text;
ADOQueryGroupe->Post(); // Сохраняем новую запись
ADOQueryGroupe->Refresh();
}
//---------------------------------------------------------------------------
void __fastcall TForm7::Button2Click(TObject *Sender)
{
ADOQuerySpeciality->SQL->Text = "SELECT id FROM Speciality WHERE Name = :name";
	ADOQuerySpeciality->Parameters->ParamByName("name")->Value = Edit1->Text;
	ADOQuerySpeciality->Open();

	// Получаем ID специальности
	int specialityId;
	if (!ADOQuerySpeciality->IsEmpty()) {
		specialityId = ADOQuerySpeciality->FieldByName("id")->AsInteger;
		ADOQuerySpeciality->Close(); // Закрываем запрос после получения данных
	} else {
		ShowMessage("Специальность не найдена.");
		ADOQuerySpeciality->Close(); // Закрываем запрос
		return;
	}

	// Подтверждение удаления
	if (MessageDlg("Вы уверены, что хотите удалить запись с указанными значениями?", mtConfirmation, TMsgDlgButtons() << mbYes << mbNo, 0) == mrYes) {
		try {
			// Настройка запроса удаления
			ADOQueryGroupe->Close();
			ADOQueryGroupe->SQL->Text = "DELETE FROM Groupe WHERE spec = :spec AND name = :name AND cours = :cours";
			ADOQueryGroupe->Parameters->ParamByName("spec")->Value = specialityId; // Используем ID специальности
			ADOQueryGroupe->Parameters->ParamByName("name")->Value = Edit2->Text;
			ADOQueryGroupe->Parameters->ParamByName("cours")->Value = Edit3->Text;
			ADOQueryGroupe->ExecSQL(); // Выполнение запроса удаления

			ADOQueryGroupe->SQL->Text = "use Practic_work select * from Groupe";
			ADOQueryGroupe->Open();
		}
		catch (const Exception &e) {
			ShowMessage("Ошибка при удалении записи: " + e.Message);
		}
	}
}
//---------------------------------------------------------------------------
void __fastcall TForm7::Edit1DropDown(TObject *Sender)
{
 Form1->Napr_search->Items->Clear();
   Form1->Napr->Close();
   Form1->Napr->SQL->Clear();
   Form1->Napr->SQL->Add("use Practic_work");
   Form1->Napr->SQL->Add("SELECT * FROM Speciality");
   Form1->Napr->Open();
   while (!Form1->Napr->Eof)
   {
	  Edit1->Items->Add(Form1->Napr->FieldByName("name")->AsString);
	  Form1->Napr->Next();
   }

}
//---------------------------------------------------------------------------
