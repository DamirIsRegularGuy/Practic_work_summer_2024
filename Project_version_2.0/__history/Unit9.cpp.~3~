//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit9.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm9 *Form9;
//---------------------------------------------------------------------------
__fastcall TForm9::TForm9(TComponent* Owner)
	: TForm(Owner)
{
}

void __fastcall TForm9::FillMemoWithUpcomingBirthdays()
{
   // Получаем текущую дату
    TDateTime Today = Date();
    // Определяем дату через 7 дней
    TDateTime EndDate = Today + 7;

    // Преобразуем даты в строку для SQL-запроса
    String todayStr = FormatDateTime("yyyy-MM-dd", Today);
    String endDateStr = FormatDateTime("yyyy-MM-dd", EndDate);

    // Формируем SQL-запрос с параметрами
    String queryStr =
        "DECLARE @Today DATE = '" + todayStr + "'; "
        "DECLARE @EndDate DATE = '" + endDateStr + "'; "
        "SELECT first_name, name, last_name, birthday "
        "FROM students "
        "WHERE "
        "(DATEPART(MM, birthday) = DATEPART(MM, @Today) "
        " AND DATEPART(DAY, birthday) BETWEEN DATEPART(DAY, @Today) AND DATEPART(DAY, @EndDate)) "
        "OR "
        "(DATEPART(MM, birthday) = DATEPART(MM, DATEADD(MONTH, 1, @Today)) "
        " AND DATEPART(DAY, birthday) <= DATEPART(DAY, @EndDate) "
        " AND DATEADD(MONTH, 1, @Today) <= @EndDate) "
        "ORDER BY "
        "CASE "
        "    WHEN DATEPART(MM, birthday) = DATEPART(MM, @Today) "
        "        THEN DATEPART(DAY, birthday) - DATEPART(DAY, @Today) "
        "    WHEN DATEPART(MM, birthday) = DATEPART(MM, DATEADD(MONTH, 1, @Today)) "
        "        THEN DATEPART(DAY, birthday) + (DATEPART(DAY, @EndDate) - DATEPART(DAY, @Today) + 1) "
        "END";

    // Закрываем запрос и устанавливаем SQL
    ADOQuery1->Close();
    ADOQuery1->SQL->Text = queryStr;

    // Попытка открыть запрос
    try {
        ADOQuery1->Open();
    } catch (Exception &e) {
        ShowMessage("Error opening query: " + e.Message);
        return;
    }

    // Очищаем Memo
    Memo1->Clear();

    // Проверяем наличие данных и заполняем Memo
    if (ADOQuery1->IsEmpty()) {
        ShowMessage("No upcoming birthdays found.");
    } else {
        while (!ADOQuery1->Eof)
        {
            // Получаем дату из поля
            Variant birthdayVar = ADOQuery1->FieldByName("birthday")->Value;

            // Преобразуем Variant в TDateTime
            TDateTime birthDate;
            try {
                birthDate = VarToDateTime(birthdayVar);
            } catch (...) {
                ShowMessage("Error converting birthday field to TDateTime.");
                continue;
            }

            // Преобразуем дату в строку с нужным форматом
            String birthDateStr = FormatDateTime("dd.mm.yyyy", birthDate);

            // Добавляем строку в Memo
            Memo1->Lines->Add(
                ADOQuery1->FieldByName("first_name")->AsString + " " +
                ADOQuery1->FieldByName("name")->AsString + " " +
                ADOQuery1->FieldByName("last_name")->AsString + " - " +
                birthDateStr
            );

            ADOQuery1->Next();
        }
    }
}

//---------------------------------------------------------------------------
void __fastcall TForm9::Button1Click(TObject *Sender)
{
   FillMemoWithUpcomingBirthdays();
}
//---------------------------------------------------------------------------
